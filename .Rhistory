contrasts(carData$heavy)
# Fit a simple linear regression model for mpg as a function of heavy
model = lm(data = carData, mpg ~ heavy)
# Print summary of model
summary(model)
# Average mpg of the not heavy cars
mean(carData[carData$heavy == 'no', 'mpg'])
# Average mpg of the heavy cars minus the average mpg of the not heavy cars
mean(carData[carData$heavy == 'yes', 'mpg']) - mean(carData[carData$heavy == 'no', 'mpg'])
# Noisy sin function as a population model
nsamples = 1000
x = seq(0, 2*pi, length = nsamples)
y = sin(x) + rnorm(length(x), mean = 0, sd = 0.1)
popData = data.frame(x, y)
colnames(popData) = c('X', 'Y')
ggplot(data = popData, aes(x = X, y = Y)) +
geom_point(size = 1, color = 'blue') +
geom_smooth(method = lm, formula = y ~ x, color = 'red', se = FALSE) +
labs(x = 'X', y = 'Y') +
ggtitle("Population Data with Population Regression Line") +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 16, face = "bold"))
# Simple linear regression model and coefficient estimates
model = lm(data = popData, Y~X)
summary(model)
beta0 = summary(model)$coefficients["(Intercept)", "Estimate"]
beta1= summary(model)$coefficients["X", "Estimate"]
print(beta0)
print(beta1)
# Fit SLRM using multiple datasets
ndatasets = 1000
nsamples = 20
beta_0_hat = numeric(ndatasets)
beta_1_hat = numeric(ndatasets)
for (j in seq(1, ndatasets)) {
idx = sample(nrow(popData), nsamples)
model = lm(data = popData[idx,], Y~X)
beta_0_hat[j] = summary(model)$coefficients["(Intercept)", "Estimate"]
beta_1_hat[j] = summary(model)$coefficients["X", "Estimate"]
}
beta_0_hat_avg = mean(beta_0_hat)
beta_1_hat_avg = mean(beta_1_hat)
print(beta_0_hat_avg)
print(beta0)
print(beta_1_hat_avg)
print(beta1)
beta_0_hat
mean(beta_0_hat)
beta1
# Plot dataset with sample regression line
ggplot(data = popData[idx, ], aes(x = X, y = Y)) +
geom_point(size = 1, color = 'blue') +
geom_smooth(method = lm, formula = y ~ x, color = 'red', se = FALSE) +
labs(x = 'X', y = 'Y') +
ggtitle("Sample Data with Sample Regression Line") +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 16, face = "bold"))
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
# Noisy sin function as a population model
nsamples = 1000
x = seq(0, 2*pi, length = nsamples)
y = sin(x) + rnorm(length(x), mean = 0, sd = 0.1)
popData = data.frame(x, y)
colnames(popData) = c('X', 'Y')
ggplot(data = popData, aes(x = X, y = Y)) +
geom_point(size = 1, color = 'blue') +
geom_smooth(method = lm, formula = y ~ x, color = 'red', se = FALSE) +
labs(x = 'X', y = 'Y') +
ggtitle("Population Data with Population Regression Line") +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 16, face = "bold"))
# Simple linear regression model and coefficient estimates
model = lm(data = popData, Y~X)
summary(model)
beta0 = summary(model)$coefficients["(Intercept)", "Estimate"]
beta1= summary(model)$coefficients["X", "Estimate"]
print(beta0)
print(beta1)
# Fit SLRM using multiple datasets
ndatasets = 1000
nsamples = 100
beta_0_hat = numeric(ndatasets)
beta_1_hat = numeric(ndatasets)
serrorbeta_0  = numeric(ndatasets)
serrorbeta_1  = numeric(ndatasets)
for (j in seq(1, ndatasets)) {
idx = sample(nrow(popData), nsamples)
model = lm(data = popData[idx,], Y~X)
beta_0_hat[j] = summary(model)$coefficients["(Intercept)", "Estimate"]
beta_1_hat[j] = summary(model)$coefficients["X", "Estimate"]
serrorbeta_0[j] = summary(model)$coefficients["(Intercept)", "Std. Error"]
serrorbeta_1[j] = summary(model)$coefficients["X", "Std. Error"]
}
# Plot histogram of estimates from different datasets
dfbetaHat = as.data.frame(cbind(beta_0_hat, beta_1_hat, serrorbeta_0, serrorbeta_1))
colnames(dfbetaHat) = c('beta0hat', 'beta1hat', 'serrorbeta0hat', 'serrorbeta1hat')
beta = beta_0_hat
mu = mean(beta)
sigma = sd(beta)
delta = 0.1 # bin width for histogram
ggplot(data = dfbetaHat) +
geom_histogram(aes(x = beta0hat, y = ..count..),
breaks = seq(mu-4*sigma, mu+4*sigma, by = delta),
colour = 'black', fill = 'steelblue', alpha = 0.4) +
labs(x = 'Beta0 Estimates', y = 'Frequency')+
ggtitle('Histogram of Intercept Estimates') +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"))
# For beta0hat, calculate the 95% confidence interval estimates generated from# each dataset. After that, find the percentage of the intervals generated from all datasets that actually contain the true beta0 value.
# True beta0 value
print(beta0)
betaHat0_CI95 = cbind(dfbetaHat$beta0hat-2*dfbetaHat$serrorbeta0hat,
dfbetaHat$beta0hat+2*dfbetaHat$serrorbeta0hat)
#print(betaHat0_CI95) # confidence 95% confidence interval estimates
checkCI = function(data){
return(between(beta0, data[1], data[2]))
}
mean(apply(betaHat0_CI95, 1, checkCI))*100
betaHat0_CI95
# Load the mtcars dataset
file = 'data/mtcars.csv'
carData = read.csv(file, header = TRUE, row.names = 1, stringsAsFactors = FALSE)
str(carData)
# Convert categorical columns to represent factor levels
categorical_cols = c('cyl', 'vs', 'am', 'gear', 'carb')
carData[categorical_cols] = lapply(carData[categorical_cols], as.factor)
str(carData)
# Print the first five rows (or samples) in the data frame
head(carData, 5)
# Fit a simple linear regression model for mpg as a function of hp
model = lm(data = carData, mpg ~ hp)
# Print summary of model
summary(model)
# Standard errors of the estimates
# beta0hat standard error
print(summary(model)$coefficients['(Intercept)', 'Std. Error'])
# beta1hat standard error
print(summary(model)$coefficients['hp', 'Std. Error'])
summary(model)
library(ggplot2)
library(dplyr)
library(reshape)
install.packages("reshape")
library(ggplot2)
library(dplyr)
library(reshape)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv('"D:/2nd sem/AAPS/Codes/Data/diabetes.csv"', header = TRUE, stringsAsFactors = FALSE)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv('"D:/2nd sem/AAPS/Codes/Data/diabetes.csv"', header = TRUE, stringsAsFactors = FALSE)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv('"D:/2nd sem/AAPS/Codes/Data/diabetes.csv"', header = TRUE, stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
library(reshape)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv('"D:/2nd sem/AAPS/Codes/Data/diabetes.csv"', header = TRUE, stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
library(reshape)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv('"D:/2nd sem/AAPS/Codes/Data/diabetes.csv"', header = TRUE, stringsAsFactors = FALSE)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv("D:/2nd sem/AAPS/Codes/Data/diabetes.csv", header = TRUE, stringsAsFactors = FALSE)
str(df)
# Create a new feature called BMILEVEL using the BMI column and the following rules: BMI < 18.5 is underweight, 18.5 <= BMI <= 24.9 is healthy, 25 <= BMI <= 29.9 is overweight, BMI >= 30 is unhealthy
df = df %>% mutate(BMILEVEL = case_when(BMI < 18.5 ~ 'underweight', BMI >= 18.5 & BMI <= 24.9 ~ 'healthy',BMI <= 25.5 & BMI <= 29.9 ~ 'overweight', BMI >= 30 ~ 'unhealthy'))
str(df)
# Convert 'GENDER' and 'BMILEVEL' columns to factors
categorical_cols = c('GENDER', 'BMILEVEL')
df[categorical_cols] = lapply(df[categorical_cols],as.factor)
# Create a new feature called BMILEVEL using the BMI column and the following rules: BMI < 18.5 is underweight, 18.5 <= BMI <= 24.9 is healthy, 25 <= BMI <= 29.9 is overweight, BMI >= 30 is unhealthy
df = df %>% mutate(BMILEVEL = case_when(BMI < 18.5 ~ 'underweight', BMI >= 18.5 & BMI <= 24.9 ~ 'healthy',BMI >= 25.5 & BMI <= 29.9 ~ 'overweight', BMI >= 30 ~ 'unhealthy'))
str(df)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv("D:/2nd sem/AAPS/Codes/Data/diabetes_new.csv", header = TRUE, stringsAsFactors = FALSE)
str(df)
# Create a new feature called BMILEVEL using the BMI column and the following rules: BMI < 18.5 is underweight, 18.5 <= BMI <= 24.9 is healthy, 25 <= BMI <= 29.9 is overweight, BMI >= 30 is unhealthy
df = df %>% mutate(BMILEVEL = case_when(BMI < 18.5 ~ 'underweight', BMI >= 18.5 & BMI <= 24.9 ~ 'healthy',BMI >= 25.5 & BMI <= 29.9 ~ 'overweight', BMI >= 30 ~ 'unhealthy'))
str(df)
# Convert 'GENDER' and 'BMILEVEL' columns to factors
categorical_cols = c('GENDER', 'BMILEVEL')
df[categorical_cols] = lapply(df[categorical_cols],as.factor)
str(df)
# Create a list of continuous columns
continuous_cols = setdiff(colnames(df), categorical_cols)
continuous_cols
# How many levels does the categorical variable *BMILEVEL* have? What is the reference level?
contrasts(df$BMILEVEL)
levels(df$BMILEVEL)
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
model = lm(data = df, Y ~ BMILEVEL)
summary(model)
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
model = lm(data = df, Y ~ BMILEVEL)
summary(model)
model1 = lm(data = df, Y ~ BMILEVEL == "healthy")
summary(model1)
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
#model = lm(data = df, Y ~ BMILEVEL)
#summary(model)
model1 = lm(data = df, Y ~ BMILEVEL == "unhealthy")
summary(model1)
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
#model = lm(data = df, Y ~ BMILEVEL)
#summary(model)
model1 = lm(data = df, Y ~ BMILEVEL == "overweight")
summary(model1)
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
#model = lm(data = df, Y ~ BMILEVEL)
#summary(model)
model1 = lm(data = df, Y ~ BMILEVEL == "underweight")
summary(model1)
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
#model = lm(data = df, Y ~ BMILEVEL)
#summary(model)
model1 = lm(data = df, BP ~ BMILEVEL == "underweight")
summary(model1)
# "underweight" is not linear
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
model = lm(data = df, Y ~ BMILEVEL)
summary(model)
#model1 = lm(data = df, BP ~ BMILEVEL == "underweight")
#summary(model1)
# "underweight" is not linear
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
model = lm(data = df, BP ~ BMILEVEL)
summary(model)
#model1 = lm(data = df, BP ~ BMILEVEL == "underweight")
#summary(model1)
# "underweight" is not linear
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
model = lm(data = df, Y ~ BMILEVEL)
summary(model)
model1 = lm(data = df, Y ~ BMILEVEL == "underweight")
summary(model1)
# "underweight" is not linear
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
model = lm(data = df, Y ~ BMILEVEL)
summary(model)
model1 = lm(data = df, Y ~ BMILEVEL == "underweight")
summary(model1)
# "underweight" is not linear because the accuracy is in -ve
model2 = lm(data = df, Y ~ BMILEVEL == "unhealthy")
summary(model2)
model3 = lm(data = df, Y ~ BMILEVEL == "healthy")
summary(model3)
model4 = lm(data = df, Y ~ BMILEVEL == "overweight")
summary(model4)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, df["AGE", "BMI" ,"BP" , "Y"])
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, ["AGE", "BMI" ,"BP" , "Y" ])
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_nonBS = df[ "AGE", "BMI" ,"BP" , "Y"]
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_nonBS = df[ "AGE", "BMI" ,"BP","Y"]
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_nonBS = df$("AGE", "BMI" ,"BP","Y")
df["AGE", "BMI" ,"BP","Y"]
# Create a list of continuous columns
continuous_cols = setdiff(colnames(df), categorical_cols)
continuous_cols
df["AGE", "BMI" ,"BP","Y"]
df["AGE", "BMI" ,"BP"]
df['BP']
df['AGE', 'BMI', 'BP']
df.columns
colnames(df)
colnames(df)[0]
colnames(df)
str(colnames(df))
colnames(df)
colnames(df)[1]
colnames(df)[2]
colnames(df)[1:]
colnames(df)[1]
c(colnames(df)[1], colnames(df)[2], colnames(df)[3], colnames(df)[11])
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_nonBS = c(colnames(df)[1], colnames(df)[2], colnames(df)[3], colnames(df)[11])
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_BS
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_BS
continuous_cols_nonBS = c(colnames(df)[1], colnames(df)[2], colnames(df)[3], colnames(df)[4], colnames(df)[11])
continuous_cols_nonBS
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_BS
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_BS
model = lm(data = df, Y~ BMILEVEL + continuous_cols_BS )
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_BS
model = lm(data = df, Y~ BMILEVEL && continuous_cols_BS )
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_BS
model = lm(data = df, Y~ BMILEVEL + continuous_cols_BS )
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_BS
model = lm(data = df, Y~ BMILEVEL +S1 )
summary(model)
#model1 = lm(data = df, Y ~ BMILEVEL == "underweight")
#summary(model1)
# "underweight" is not linear because the accuracy is in -ve
#model2 = lm(data = df, Y ~ BMILEVEL == "unhealthy")
#summary(model2)
#model3 = lm(data = df, Y ~ BMILEVEL == "healthy")
#summary(model3)
#model4 = lm(data = df, Y ~ BMILEVEL == "overweight")
#summary(model4)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_BS
model = lm(data = df, Y~ BMILEVEL +S1 + S2 + S3 + S4 + S5 + S6 )
summary(model)
#model1 = lm(data = df, Y ~ BMILEVEL == "underweight")
#summary(model1)
# "underweight" is not linear because the accuracy is in -ve
#model2 = lm(data = df, Y ~ BMILEVEL == "unhealthy")
#summary(model2)
#model3 = lm(data = df, Y ~ BMILEVEL == "healthy")
#summary(model3)
#model4 = lm(data = df, Y ~ BMILEVEL == "overweight")
#summary(model4)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_BS
model = lm(data = df, Y~ BMILEVEL +S1 + S2 + S3 + S4 + S5 + S6 )
summary(model)
model1 = lm(data = df, Y ~ BMILEVEL == "underweight" +S1 + S2 + S3 + S4 + S5 + S6)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_BS
model = lm(data = df, Y~ BMILEVEL +S1 + S2 + S3 + S4 + S5 + S6 )
summary(model)
model1 = lm(data = df, Y ~ (BMILEVEL == "underweight") +S1 + S2 + S3 + S4 + S5 + S6)
summary(model1)
# "underweight" is not linear because the accuracy is in -ve
model2 = lm(data = df, Y ~ BMILEVEL == "unhealthy" +S1 + S2 + S3 + S4 + S5 + S6)
# Fit a linear model for predicting disease progression using BMILEVEL and the blood serum measurements.
# From the model summary, explain how you will find out which blood serum measurements are most likely to have a linear relationship with disease progression.
# Fit a model using BMILEVEL and the blood serum measurements identified in the previous question and compare its accuracy with the model fit using BMILEVEL and all blood serum measurements.
continuous_cols_BS = setdiff(continuous_cols, continuous_cols_nonBS )
continuous_cols_BS
model = lm(data = df, Y~ BMILEVEL +S1 + S2 + S3 + S4 + S5 + S6 )
summary(model)
model1 = lm(data = df, Y ~ (BMILEVEL == "underweight") +S1 + S2 + S3 + S4 + S5 + S6)
summary(model1)
# "underweight" is not linear because the accuracy is in -ve
model2 = lm(data = df, Y ~ (BMILEVEL == "unhealthy") +S1 + S2 + S3 + S4 + S5 + S6)
summary(model2)
model3 = lm(data = df, Y ~ (BMILEVEL == "healthy") +S1 + S2 + S3 + S4 + S5 + S6)
summary(model3)
model4 = lm(data = df, Y ~ (BMILEVEL == "overweight") +S1 + S2 + S3 + S4 + S5 + S6)
summary(model4)
# Fit a linear model for predicting disease progression using BMI, age, BP, and gender. How accurate is the model?
# According to the model, which gender has a worse disease progression? Explain why.
# For the same age, BP, and gender, decreasing BMI by 1 unit causes what change in the disease progression?
# For the same age and BP, which gender benefits better w.r.t. disease progressions by decreasing BMI by 1 unit. Explain.
model = lm(data = df, Y ~ BMI+AGE+ BP+ GENDER)
summary(model)
# Fit a linear model for predicting disease progression using BMI, age, BP, and gender. How accurate is the model?
# According to the model, which gender has a worse disease progression? Explain why.
# For the same age, BP, and gender, decreasing BMI by 1 unit causes what change in the disease progression?
# For the same age and BP, which gender benefits better w.r.t. disease progressions by decreasing BMI by 1 unit. Explain.
model = lm(data = df, Y ~ BMI+AGE+ BP+ GENDER)
summary(model)
model1 = lm(data = df, Y ~ BMI+AGE+ BP+ (GENDER==1) + (GENDER == 2))
summary(model1)
df['GENDER']
# Fit a linear model for predicting disease progression using BMI, age, BP, gender and interaction between BMI and gender. Is this model more accurate than the model without interaction between BMI and gender?
model = lm(data = df, BMI ~ GENDER)
summary(model)
# Fit a linear model for predicting disease progression using BMI, age, BP, gender and interaction between BMI and gender. Is this model more accurate than the model without interaction between BMI and gender?
model = lm(data = df, (BMI ~ GENDER))
summary(model)
model1 = lm(data = df, Y ~ BMI + AGE + BP + GENDER + model)
# Fit a linear model for predicting disease progression using BMI, age, BP, gender and interaction between BMI and gender. Is this model more accurate than the model without interaction between BMI and gender?
model = lm(data = df, (BMI ~ GENDER))
summary(model)
model1 = lm(data = df, Y ~ BMI + AGE + BP + GENDER + (BMI ~ GENDER))
# Fit a linear model for predicting disease progression using BMI, age, BP, gender and interaction between BMI and gender. Is this model more accurate than the model without interaction between BMI and gender?
#model = lm(data = df, (BMI ~ GENDER))
#summary(model)
model1 = lm(data = df, Y ~ BMI + AGE + BP + GENDER + (BMI * GENDER))
summary(model1)
library(ggplot2)
library(dplyr)
library(reshape)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv("diabetes_new.csv", header = TRUE, stringsAsFactors = FALSE)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv("diabetes_new.csv", header = TRUE, stringsAsFactors = FALSE)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv("D:/2nd sem/AAPS/Codes/Data/diabetes_new.csv", header = TRUE, stringsAsFactors = FALSE)
str(df)
# Create a new feature called BMILEVEL using the BMI column and the following rules: BMI < 18.5 is underweight, 18.5 <= BMI <= 24.9 is healthy, 25 <= BMI <= 29.9 is overweight, BMI >= 30 is unhealthy
df = df %>% mutate(BMILEVEL = case_when(BMI < 18.5 ~ 'underweight', BMI >= 18.5 & BMI <= 24.9 ~ 'healthy',25.5 <= BMI <= 29.9 ~ 'overweight', BMI >= 30 ~ 'unhealthy'))
# Create a new feature called BMILEVEL using the BMI column and the following rules: BMI < 18.5 is underweight, 18.5 <= BMI <= 24.9 is healthy, 25 <= BMI <= 29.9 is overweight, BMI >= 30 is unhealthy
df = df %>% mutate(BMILEVEL = case_when(BMI < 18.5 ~ 'underweight', BMI >= 18.5 & BMI <= 24.9 ~ 'healthy', BMI >= 25.5 & BMI <= 29.9 ~ 'overweight', BMI >= 30 ~ 'unhealthy'))
str(df)
