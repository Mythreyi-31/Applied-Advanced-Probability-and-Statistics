unique(x)
str(simulatedData)
simulatedData[, 1:3]
data = simulatedData[, 1]
data
grepl('A', data)
sum(grepl('A', data))
sum(grepl('A', data)) == 3
# Check event that exactly 3 aces are dealt
checkEvent1 = function(data){
return(sum(grepl('A', data)) == 3)
}
# Calculate probability that exactly 3 aces are dealt
mean(apply(simulatedData, 2, checkEvent1))
which(apply(simulatedData, 2, function(data){return(sum(grepl('A', data)) == 4)}))
data = simulatedData[, 2943]
data
sum(grepl('A', data)) == 4
grepl('A', data)
sum(grepl('A', data))
sum(grepl('A', data)) == 4
data
grepl('A', data)
which(grepl('A', data))
which(grepl('A', data)) / 5
ceiling(which(grepl('A', data)) / 5)
unique(ceiling(which(grepl('A', data)) / 5))
length(unique(ceiling(which(grepl('A', data)) / 5))) == 4
# Check event that 4 hands have exactly one ace each
checkEvent2 = function(data){
condition1 = (sum(grepl('A', data)) == 4)
condition2 = (length(unique(ceiling(which(grepl('A', data)) / 5))) == 4)
return(condition1 & condition2)
}
# Calculate probability that 4 hands have exactly one ace each
mean(apply(simulatedData, 2, checkEvent2))
which(apply(simulatedData, 2, function(data){return(sum(grepl('A', data)) == 4)}))
simulatedData[, 2984]
data = simulatedData[, 2984]
grepl('A', data)
length(unique(ceiling(which(grepl('A', data)) / 5))) == 4
ceiling(which(grepl('A', data)) / 5)
which(grepl('A', data))
nsuccess = 4
nfailure = 48
n = 40
j = 3
dhyper(j, nsuccess, nfailure, n)
choose(4, 3)*choose(48, 37) / choose(52, 40)
dhyper(1, nsuccess, nfailure, n)
dhyper(1, nsuccess, nfailure, n)
dhyper(2, nsuccess, nfailure, n)
dhyper(3, nsuccess, nfailure, n)
dhyper(4, nsuccess, nfailure, n)
dhyper(c(1:4), nsuccess, nfailure, n)
sum(dhyper(c(1:4), nsuccess, nfailure, n))
1-dhyper(0, nsuccess, nfailure, n)
phyper(3, nsuccess, nfailure, n)
dhyper(3, nsuccess, nfailure, n)
nsimulations = 10
rhyper(nsimualtions, nsuccess, nfailure, n)
rhyper(nsimulations, nsuccess, nfailure, n)
simulatedData = rhyper(1000, nsuccess, nfailure, n)
mean(simulatedData == 3)
mean(simulatedData <= 3)
r = 20
p = 0.2
j = 100
dnbinom(j-r, r, p)
j = 1000
dnbinom(j-r, r, p)
j = 20
dnbinom(j-r, r, p)
j = 50
dnbinom(j-r, r, p)
j = 100
dnbinom(j-r, r, p)
j = 200
dnbinom(j-r, r, p)
r = 20
p = 0.2
j = c(20:200)
dnbinom(j-r, r, p)
r = 20
p = 0.2
j = c(20:200)
cbind(j, dnbinom(j-r, r, p))
r = 20
p = 0.2
j = c(20:200)
as.data.frame(cbind(j, dnbinom(j-r, r, p)))
r = 20
p = 0.2
j = c(20:200)
df = as.data.frame(cbind(j, dnbinom(j-r, r, p)))
colnames(df) = c('j', 'probability')
head(df)
r = 20
p = 0.2
j = c(20:200)
df = as.data.frame(cbind(j, dnbinom(j-r, r, p)))
colnames(df) = c('j', 'probability')
p = ggplot(data = df) +
geom_bar(aes(x = j, y = probability), width = 0.1)
p
r = 20
p = 0.2
j = c(20:200)
df = as.data.frame(cbind(j, dnbinom(j-r, r, p)))
colnames(df) = c('j', 'probability')
p = ggplot(data = df) +
geom_col(aes(x = j, y = probability), width = 0.1)
p
r = 20
p = 0.2
j = c(20:200)
df = as.data.frame(cbind(j, dnbinom(j-r, r, p)))
colnames(df) = c('j', 'probability')
p = ggplot(data = df) +
geom_col(aes(x = j, y = probability))
p
x = c(1, -2, 10, 40, 15, -15, -20)
max(x)
argmax(x)
argmax?
x
argmax(x)
which.max(x)
x
max(x)
which.max(x)
library(ggplot2) # plotting library
library(dplyr)   # data wrangling library
# Generate a 52-card deck
suits = c('H', 'D', 'S', 'C')
cards = c(2:10, 'J', 'Q', 'K', 'A')
s = paste0(rep(cards, length(suits)), rep(suits, each = length(cards)))
# Simulate dealing 5 cards to 8 hands (40 cards)
nsimulations = 1e5
simulatedData = replicate(nsimulations, sample(s, size = 40, prob = rep(1/length(s), length(s))))
# Check event that exactly 3 aces are dealt
checkEvent1 = function(data){
return(sum(grepl('A', data)) == 3)
}
# Check event that 4 hands have exactly one ace each
checkEvent2 = function(data){
condition1 = (sum(grepl('A', data)) == 4)
condition2 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 4)
return(condition1 & condition2)
}
# Check event that one hand has all four aces
checkEvent3 = function(data){
condition1 = (sum(grepl('A', data)) == 4)
condition2 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 1)
return(condition1 & condition2)
}
# Check event given that the ace of spades was among the cards dealt, that it is in a hand with at least one other spade.
checkEvent4 = function(data){
hand = ceiling(which(data == 'AS') / 5)
return('AH' %in% data[c((1+(hand-1)*5):(hand*5))] | 'AD' %in% data[c((1+(hand-1)*5):(hand*5))] | 'AC' %in% data[c((1+(hand-1)*5):(hand*5))])
}
# Check event given that exactly two aces and two queens were dealt, that both aces are together in one hand and both queens are together in a different hand.
checkEvent5 = function(data){
condition1 = (length(unique(ceiling(which(grepl('A', data)) /5))) == 1)
condition2 = (length(unique(ceiling(which(grepl('Q', data)) /5))) == 1)
condition3 = ((ceiling(which(grepl('A', data)) /5)) != (ceiling(which(grepl('Q', data)) /5)))
return(condition1 & condition2 & condition3)
}
# Check event given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand that all four of those cards are together in the same hand.
checkEvent6 = function(data){
return(unique(ceiling(which(grepl('A', data)) /5)) == unique(ceiling(which(grepl('Q', data)) /5)))
}
# Calculate probability that exactly 3 aces are dealt
mean(apply(simulatedData, 2, checkEvent1))
# Calculate probability that 4 hands have exactly one ace each
mean(apply(simulatedData, 2, checkEvent2))
# Calculate probability that one hand has all four aces
mean(apply(simulatedData, 2, checkEvent3))
# Calculate probability given that the ace of spades was among the cards dealt, that it is in a hand with at least one other spade.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return('AS' %in% data)})]
mean(apply(simulatedData_reduced, 2, checkEvent4))
# Calculate probability given that exactly two aces and two queens were dealt, find the probability that both aces are together in one hand and both queens are together in a different hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return('AS' %in% data)})]
mean(apply(simulatedData_reduced, 2, checkEvent4))
# Calculate probability given that exactly two aces and two queens were dealt, find the probability that both aces are together in one hand and both queens are together in a different hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return('AS' %in% data)})]
mean(apply(simulatedData_reduced, 2, checkEvent4))
# Calculate probability given that exactly two aces and two queens were dealt, find the probability that both aces are together in one hand and both queens are together in a different hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2)})]
mean(apply(simulatedData_reduced, 2, checkEvent5))
x = [1, 2]
y = [3, 3]
x = [1, 2]
x = c(1, 2)
y = c(3, 3)
x != y
y = c(4, 5)
x != y
x = c(2, 3)
y = c(2, 3)
x != y
# Calculate probability given that exactly two aces and two queens were dealt with the two aces together in a hand and the two queens together in a hand, find the probability that all four of those cards are together in the same hand.
simulatedData_reduced = simulatedData[, apply(simulatedData, 2, function(data){return((sum(grepl('A', data)) == 2) & sum(grepl('Q', data)) == 2 & length(unique(ceiling(which(grepl('A', data)) /5))) == 1 & length(unique(ceiling(which(grepl('Q', data)) /5))) == 1)})]
mean(apply(simulatedData_reduced, 2, checkEvent6))
(pbinom(2, 10, 0.1) * 0.2) / (pbinom(2, 10, 0.1) * 0.2 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.4)
(pbinom(2, 10, 0.1) * 0.3) / (pbinom(2, 10, 0.1) * 0.2 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.4)
(pbinom(2, 10, 0.1) * 0.4) / (pbinom(2, 10, 0.1) * 0.2 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.4)
(pbinom(2, 10, 0.1) * 0.4) / (pbinom(2, 10, 0.1) * 0.4 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.4)
(pbinom(2, 10, 0.1) * 0.4) / (pbinom(2, 10, 0.1) * 0.4 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.4)
(pbinom(2, 10, 0.1) * 0.4) / (pbinom(2, 10, 0.1) * 0.4 + pbinom(2, 10, 0.3) * 0.4 + pbinom(2, 10, 0.8) * 0.2)
pexp(20*5*365, 1/10000)
pexp(23*5*365, 1/10000)
pexp(16*5*365, 1/10000)
pexp(10*5*365, 1/10000)
1-pexp(20*5*365, 1/10000)
1-pexp(20*5*365, 1/20000)
pexp(20*5*365, 1/20000)
pexp(20*5*365, 1/5000)
pexp(23*5*365, 1/5000)
pexp(23*10*365, 1/5000)
pexp(20*2*365, 1/5000)
pexp(20*1*365, 1/5000)
1-pexp(20*1*365, 1/5000)
z = (80-(85/15))
z
z = (80-(85/15)) / sqrt(75/(15^2))
z
sqrt(75/(15^2))
80-(85/15)
z = (80-(85/15)) / sqrt(75/15)
z
z = (80-85) / sqrt(75/15)
z
1-pnorm(z)
1-((75/15)/((75/15)+80^2))
1-((75/15)/((75/15)+5^2))
(75/15)/((75/15)+5^2)
library(ggplot2)
library(dplyr)
library(HSAUR)
library(ggcorrplot)
library(ggplot2)
library(dplyr)
library(HSAUR)
library(ggcorrplot)
# Load California housing data
file = 'Data/SaratogaHouses.csv'
hData = read.csv(file, header = TRUE, stringsAsFactors = FALSE)
str(hData)
# Load California housing data
file = 'Data/SaratogaHouses.csv'
hData = read.csv(file, header = TRUE, stringsAsFactors = FALSE)
str(hData)
# Load California housing data
file = 'Data/SaratogaHouses.csv'
hData = read.csv(file, header = TRUE, stringsAsFactors = FALSE)
setwd("D:/OneDrive - Manipal Academy of Higher Education/EvenSemester2024/AML5201/Codes/AIML")
# Load California housing data
file = 'Data/SaratogaHouses.csv'
hData = read.csv(file, header = TRUE, stringsAsFactors = FALSE)
# Load California housing data
file = '../Data/SaratogaHouses.csv'
hData = read.csv(file, header = TRUE, stringsAsFactors = FALSE)
hData = hData %>%
x
setwd("D:/OneDrive - Manipal Academy of Higher Education/EvenSemester2024/AML5201/Codes")
# Load California housing data
file = 'Data/SaratogaHouses.csv'
hData = read.csv(file, header = TRUE, stringsAsFactors = FALSE)
hData = hData %>%
setwd("D:/OneDrive - Manipal Academy of Higher Education/EvenSemester2024/AML5201/Codes/AIML")
# Load California housing data
file = 'Data/SaratogaHouses.csv'
hData = read.csv(file, header = TRUE, stringsAsFactors = FALSE)
#hData = hData %>%
str(hData)
# Load California housing data
file = 'Data/SaratogaHouses.csv'
hData = read.csv(file, header = TRUE, stringsAsFactors = FALSE)
hData = hData %>% select(c(price, livingArea, heating)
# Load California housing data
file = 'Data/SaratogaHouses.csv'
# Load California housing data
file = 'Data/SaratogaHouses.csv'
hData = read.csv(file, header = TRUE, stringsAsFactors = FALSE)
hData = hData %>% select(c(price, livingArea, heating))
str(hData)
hData[c('price', 'livingArea', 'heating')]
# Load California housing data
file = 'Data/SaratogaHouses.csv'
hData = read.csv(file, header = TRUE, stringsAsFactors = FALSE)
hData = hData %>% select(-c(price, livingArea, heating))
str(hData)
hData[-c('price', 'livingArea', 'heating')]
# Load California housing data
file = 'Data/SaratogaHouses.csv'
hData = read.csv(file, header = TRUE, stringsAsFactors = FALSE)
hData = hData %>% select(c(price, livingArea, heating))
str(hData)
# Convert heating column to factor type
hData['heating'] = lapply(hData['heating'], factor)
str(hData)
mean(hData$price)-4*sd(hdata$price)
mean(hData$price)-4*sd(hData$price)
mean(hData$price)+4*sd(hData$price)
seq(mean(hData$price)-4*sd(hData$price), mean(hData$price)+4*sd(hData$price), by = 500)
# Make a histogram of price values
p = ggplot(data = hData) +
geom_histogram(aes(x = price, y = ..count..), breaks = seq(mean(hData$price)-4*sd(hData$price), mean(hData$price)+4*sd(hData$price), by = 500), color = 'black', fill = 'blue') +
labs(x = 'Price', y = 'Frequency')  +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"))
p
# Make a histogram of price values
p = ggplot(data = hData) +
geom_histogram(aes(x = price, y = ..count..), breaks = seq(mean(hData$price)-4*sd(hData$price), mean(hData$price)+4*sd(hData$price), by = 2000), color = 'black', fill = 'blue') +
labs(x = 'Price', y = 'Frequency')  +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"))
p
# Make a histogram of price values
p = ggplot(data = hData) +
geom_histogram(aes(x = price, y = ..count..), breaks = seq(mean(hData$price)-4*sd(hData$price), mean(hData$price)+4*sd(hData$price), by = 5000), color = 'black', fill = 'blue') +
labs(x = 'Price', y = 'Frequency')  +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"))
p
# Make a histogram of price values
p = ggplot(data = hData) +
geom_histogram(aes(x = price, y = ..count..), breaks = seq(mean(hData$price)-4*sd(hData$price), mean(hData$price)+4*sd(hData$price), by = 20000), color = 'black', fill = 'blue') +
labs(x = 'Price', y = 'Frequency')  +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"))
p
# Make a histogram of price values
p = ggplot(data = hData) +
geom_histogram(aes(x = price, y = ..count..), breaks = seq(mean(hData$price)-4*sd(hData$price), mean(hData$price)+4*sd(hData$price), by = 50000), color = 'black', fill = 'blue') +
labs(x = 'Price', y = 'Frequency')  +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"))
p
# Make a histogram of price values
p = ggplot(data = hData) +
geom_histogram(aes(x = price, y = ..count..), breaks = seq(mean(hData$price)-4*sd(hData$price), mean(hData$price)+4*sd(hData$price), by = 25000), color = 'black', fill = 'blue') +
labs(x = 'Price', y = 'Frequency')  +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"))
p
hist(hData$price)
# Make a histogram of price values
p = ggplot(data = hData) +
geom_histogram(aes(x = price, y = ..count..), breaks = seq(mean(hData$price)-4*sd(hData$price), mean(hData$price)+4*sd(hData$price), by = 25000), color = 'black', fill = 'blue') +
labs(x = 'Price', y = 'Frequency')  +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"))
p
# Make a histogram of price values
p = ggplot(data = hData) +
geom_histogram(aes(x = price, y = ..count..), breaks = seq(mean(hData$price)-4*sd(hData$price), mean(hData$price)+4*sd(hData$price), by = 25000), color = 'black', fill = 'blue') +
labs(x = 'Price', y = 'Frequency')  +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"))  +
ggtitle('Histogram of house prices')
p
# Make a histogram of price values
p = ggplot(data = hData) +
geom_histogram(aes(x = price, y = ..count..), breaks = seq(mean(hData$price)-4*sd(hData$price), mean(hData$price)+4*sd(hData$price), by = 25000), color = 'black', fill = 'blue') +
labs(x = 'Price', y = 'Frequency')  +
theme(axis.text = element_text(size = 8),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 10, face = "bold"))  +
ggtitle('Histogram of house prices')
p
mean(hData$price)
median(hData$price)
hData %>% filter(price <= median(hData$price))
nrows(hData %>% filter(price <= median(hData$price)))
nrow(hData %>% filter(price <= median(hData$price)))
nrow(hData %>% filter(price <= median(hData$price)))/nrow(hData)
nrow(hData %>% filter(price <= median(hData$price)))/nrow(hData)
quantile(hData$price, 0.75)
quantile(hData$price, 0.5)
quantile(hData$price, 0.25)
mean(hData$price)
scale(hData$price)
price_scaled = (hData$price - mean(hData$price))/sd(hData$price)
price_scaled
price_scaled = scale(hData$price)
hist(price_scaled)
sd(hData$price)
IQR(hData$price)
quantile(hData$price, 0.75)-quantile(hData$price, 0.25)
price_scaled = (hData$price - median(hData$price))/IQR(hData$price)
hist(price_scaled)
# Make a scatter plot between price and livingArea
p = ggplot(data = hData) +
geom_point(aes(x = livingArea, y = price)) +
labs(x = 'Living Area (square feet)', y = 'Price (US dollars)')  +
theme(axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"))
p
# Make a scatter plot between price and livingArea
p = ggplot(data = hData) +
geom_point(aes(x = livingArea, y = price)) +
labs(x = 'Living Area (square feet)', y = 'Price (US dollars)')  +
theme(axis.text = element_text(size = 8),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 10, face = "bold"))
p
# Make a scatter plot between price and livingArea
p = ggplot(data = hData) +
geom_boxplot(aes(x = heating, y = price)) +
labs(x = 'Living Area (square feet)', y = 'Price (US dollars)')  +
theme(axis.text = element_text(size = 8),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 10, face = "bold"))
p
hData %>% filter(heating == 'hot air')
hData %>% filter(heating == 'hot air') %>% select(price)
hist(hData %>% filter(heating == 'hot air') %>% select(price))
hData %>% filter(heating == 'hot air') %>% select(price)
(hData %>% filter(heating == 'hot air') %>% select(price))$price
hist((hData %>% filter(heating == 'hot air') %>% select(price))$price)
# Make a scatter plot between price and livingArea
p = ggplot(data = hData) +
geom_bar(aes(x = heating, y = ..count..)) +
labs(x = 'Heating', y = 'Frequency')  +
theme(axis.text = element_text(size = 8),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 10, face = "bold"))
p
# Make a scatter plot between price and livingArea
p = ggplot(data = hData) +
geom_bar(aes(x = heating, y = ..count../sum(..count..))) +
labs(x = 'Heating', y = 'Frequency')  +
theme(axis.text = element_text(size = 8),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 10, face = "bold"))
p
library(ggplot2)
library(dplyr)
library(reshape)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv("diabetes.csv", header = TRUE, stringsAsFactors = FALSE)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv('diabetes.csv', header = TRUE, stringsAsFactors = FALSE)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv('diabetes_new.csv', header = TRUE, stringsAsFactors = FALSE)
# Load the diabetes dataset:
# 10 predictors which are age, gender (1-female, 2-male), body-mass index, average blood pressure, and six blood serum measurements and 1 response variable which is a quantitative measure of disease progression one year after baseline)
df = read.csv("D:/2nd sem/AAPS/Codes/Data/diabetes_new.csv", header = TRUE, stringsAsFactors = FALSE)
str(df)
# Create a new feature called BMILEVEL using the BMI column and the following rules: BMI < 18.5 is underweight, 18.5 <= BMI <= 24.9 is healthy, 25 <= BMI <= 29.9 is overweight, BMI >= 30 is unhealthy
df = df %>% mutate(BMILEVEL = case_when(BMI < 18.5 ~ 'underweight', BMI >= 18.5 & BMI <= 24.9 ~ 'healthy', BMI >= 25.5 & BMI <= 29.9 ~ 'overweight', BMI >= 30 ~ 'unhealthy'))
str(df)
# Convert 'GENDER' and 'BMILEVEL' columns to factors
categorical_cols = c('GENDER', 'BMILEVEL')
df[categorical_cols] = lapply(df[categorical_cols],as.factor)
str(df)
# Create a list of continuous columns
continuous_cols = setdiff(colnames(df), categorical_cols)
continuous_cols
# Fit a linear model for predicting disease progression using BMILEVEL. Print the model's summary.
# How accurate is the model?
# Which level in BMILEVEL is most likely to not have a linear relationship with disease progression? What is the reason?
# How worse is the disease progression in unhealthy people compared to the healthy ones?
# How worse is the disease progression in unhealthy people compared to the overweight ones?
# Write down the individual model for each level in BMILEVEL
model = lm(data = df, Y ~ BMILEVEL)
summary(model)
#adjusted R sq is the variance. Multiple R sqr always increase when we add more values.
model1 = lm(data = df, Y ~ BMILEVEL == "underweight")
summary(model1)
# "underweight" is not linear because no sense can be made out of accuracy
model2 = lm(data = df, Y ~ BMILEVEL == "unhealthy")
summary(model2)
model3 = lm(data = df, Y ~ BMILEVEL == "healthy")
summary(model3)
#disease regression in unhealthy people has 2 units greater error than the disease regression in healthy people
model4 = lm(data = df, Y ~ BMILEVEL == "overweight")
summary(model4)
#disease regression in unhealthy people has 1 unit greater error than the disease regression in overweight people
# Fit a linear model for predicting disease progression using BMI, age, BP, gender and interaction between BMI and gender. Is this model more accurate than the model without interaction between BMI and gender?
model = lm(data = df, Y ~ BMI + AGE + BP + GENDER + (BMI * GENDER))
summary(model)
# There is no significant difference among the two.
